{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/App/App.module.css","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["module","exports","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","className","s","list","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","btn","Notification","message","App","useState","setGood","setNeutral","setBad","value","reduce","acc","percent","percentage","Math","round","countPositiveFeedbackPercentage","wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,IAAM,+B,gBCAxBD,EAAOC,QAAU,CAAC,QAAU,uB,4HCebC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,M,gBCkBQC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAIC,UAAWC,IAAEC,KAAjB,UACE,wCAAWP,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,W,gBCUSI,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,QAAS,kBAAMH,EAAgBE,IAASP,UAAWC,IAAEQ,IAA1E,SACGF,GADUA,SCENG,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,K,gBCIE,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KA6BA,IACMC,EAVJ,CAACtB,EAAMC,EAASC,GAAKqB,QAAO,SAACC,EAAKF,GAAN,OAAgBE,EAAMF,KAW9CG,EATN,WACE,IAAMC,EAAaC,KAAKC,MAAO5B,EAAOsB,EAAS,KAE/C,OAAKI,GAAmB,EAMVG,GAEhB,OACE,sBAAKxB,UAAWC,IAAEwB,QAAlB,UACE,cAAC,EAAD,CAASjC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEY,QARW,CAAC,OAAQ,UAAW,OAS/BC,gBApCgB,SAAAD,GACtB,OAAQA,GACN,IAAK,OACHU,GAAQ,SAAAnB,GAAI,OAAIA,EAAO,KACvB,MACF,IAAK,UACHoB,GAAW,SAAAnB,GAAO,OAAIA,EAAU,KAChC,MACF,IAAK,MACHoB,GAAO,SAAAnB,GAAG,OAAIA,EAAM,KACpB,MAEF,QACE,aA2BF,cAAC,EAAD,CAASL,MAAM,aAAf,SACa,IAAVyB,EACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,EACPlB,mBAAoBqB,SCtDhCM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChB,EAAD,MAEFiB,SAASC,eAAe,W","file":"static/js/main.7d2d6869.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__Gu1h6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__2QN_R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1EkJA\"};","import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport s from 'components/Statistics/Statistics.module.css';\r\n\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nimport s from 'components/FeedbackOptions/FeedbackOptions.module.css';\r\n\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button key={option} onClick={() => onLeaveFeedback(option)} className={s.btn}>\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component, useState } from 'react';\nimport Section from 'components/Section/Section';\nimport Statistics from 'components/Statistics/Statistics';\nimport FeedbackOptions from 'components/FeedbackOptions/FeedbackOptions';\nimport Notification from 'components/Notification/Notification';\nimport s from 'components/App/App.module.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = options => {\n    switch (options) {\n      case 'good':\n        setGood(good => good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral => neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad => bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () =>\n    [good, neutral, bad].reduce((acc, value) => acc + value);\n\n  function countPositiveFeedbackPercentage() {\n    const percentage = Math.round((good / value) * 100);\n\n    if (!percentage) return 0;\n    return percentage;\n  }\n\n  const optionName = ['good', 'neutral', 'bad'];\n  const value = countTotalFeedback();\n  const percent = countPositiveFeedbackPercentage();\n\n  return (\n    <div className={s.wrapper}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={optionName}\n          onLeaveFeedback={handleIncrement}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {value === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={value}\n            positivePercentage={percent}\n          />\n        )}\n      </Section>\n    </div>\n  );\n}\n\n// export default class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   handleIncrement = option => {\n//     this.setState(prevState => {\n//       return { [option]: prevState[option] + 1 };\n//     });\n//   };\n\n//   countTotalFeedback() {\n//     const totalValue = Object.values(this.state);\n//     return totalValue.reduce((acc, value) => acc + value);\n//   }\n\n//   countPositiveFeedbackPercentage() {\n//     const value = this.countTotalFeedback();\n//     const percentage = Math.round((this.state.good / value) * 100);\n\n//     if (!percentage) return 0;\n//     return percentage;\n//   }\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const stateName = Object.keys(this.state);\n//     const value = this.countTotalFeedback();\n//     const percent = this.countPositiveFeedbackPercentage();\n\n//     console.log(value);\n\n//     return (\n//       <div className={s.wrapper}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={stateName}\n//             onLeaveFeedback={this.handleIncrement}\n//           />\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           {value === 0 ? (\n//             <Notification message=\"No feedback given\" />\n//           ) : (\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={value}\n//               positivePercentage={percent}\n//             />\n//           )}\n//         </Section>\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from 'components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}